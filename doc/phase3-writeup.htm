<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P3 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired.
 * Be sure your writeup still prints legibly. */
header {
  text-align: center;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P3 Writeup</h1>
      <h2>
<!-- BEGIN CHANGES HERE -->
George Hoesch - gah33@pitt.edu
Alex Glyde - awg13@pitt.edu
Ethan Welsh - ejw45@pitt.edu
<!-- END CHANGES HERE -->
      </h2>
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->

<p>In this section, broadly overview the types of cryptographic techniques that
your group has decided to use to address threats T1–T4.</p>
System overview / Threat model:

Some assumptions about our system:

We are developing this secure file sharing system for use within a University's research department.
The users who will have access (via username / password) to the system are PhD professors,
graduate students, accelling undergraduates, and members of the university's IT department to serve as administrators.
Professors will (typically, but not exclusively) be the owners of groups, with graduate students and accelling undergraduates
serving as users.
To obtain a username and password, one must go through the Professors who will contact
the IT department to get the user an account.
All of the public keys and IPs of file servers will be posted on the
Department's SSL/TLS secured HTTPS website.

<!-- END CHANGES HERE -->
    </section>
    <section id="threat1">
      <h2>Threat T1: Unauthorized Token Issuance</h2>
<!-- BEGIN CHANGES HERE -->

<p>Unauthorized token issuance is equivalent to users being granted unauthorized access to our servers.
This is problematic because unauthorized users being granted access to tokens that do not belong to them
compromises our application's ability to discern identity. This results in a potential for adversaries
to gain access to the compromised user's groups and files. In particular, if an administrator should be
compromised, the results are particularly egregious due to the fact that administrators have a greater
degree of privilege.
</p>

<img src="../doc/authentication.png" style="width:1000px;">
<br /><br />
<p>
	The client uses the server's public key to encrypt a challenge R, along with a shared AES-256 key.
	The server responds to the challenge with some computation on R encrypted with the new shared AES key.
	Next, the user sends back their password encrypted with the shared AES key.
	The server checks this password against its salted, SHA-2 hash database of passwords.
	The user is given three attempts to provide a correct password before their account is locked temporarily
	until they contact an administrator in person.
	This mechanism was chosen to prevent an adversary from attempting to brute-force a user's password.
	If the user's password is validated, the server encrypts the user's token with the shared AES key
	after signing it with RSA and sends it.
	We chose AES-256 because of its suitability for transmitting data quickly and securely.
	Furthermore, it is used pervasively in industry.
	We chose the RSA public key crypto system because its suitable for key-exchange.
</p>

<p>
	Our mechanism addresses the proposed threat because we only issue tokens to users who are
	authenticated via their password which is securely stored on the group server's database.
	The security of our token issuance is equivalent to the security of user's password.
	For this reason, we need to take care to ensure that passwords avoid being compromised,
	are updated frequently, and meet some basic complexity requirements.
</p>
<p>
	In our authentication system, an adversary could foreseeably reach the
	stage where the user is prompted for their password.
	This is why we added a limit on the number of times a user can enter their password incorrectly.
	This prevents brute force attacks and adds to the security of our mechanism.
</p>
<!-- END CHANGES HERE -->
    </section>
    <section id="threat2">
      <h2>Threat T2: Token Modification/Forgery</h2>

<!-- BEGIN CHANGES HERE -->
<p>
	The threat of token modification or forgery is seen when an adversary receives a token with a certain set of permissions,
	but modifies the token to receive more permissions than their user is actually granted in the system.
	This threat is problematic because if an adversary is able to successfully modify a token, they can effectively grant themselves
	arbitrary permissions, such as access to the administrator group, owner of the administrator group, and unrestricted access to arbitrary groups and files.
	This compromises the confidentiality and potentially the integrity of our file sharing system.
</p>

<p>
	The mechanism that we chose to implement to protect against this threat can be viewed in the diagram below T1.
	We require that the server sign each token that it grants to users, along with encrypting that token using a shared AES
	key transmitted during the authentication period. This insures that no passively listening adversaries can see the token,
	and furthermore it prevents the user themselves from modifying the token. Any time an action is requested by the user,
	the server will validate that the token is signed by the group server using the group server's public key.
</p>

<p>
	Our mechanism sufficiently addresses this particular threat because it prevents modification of tokens by users,
	and prevents passively listening adversaries from acquiring an unencrypted token.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat3">
      <h2>Threat T3: Unauthorized File Servers</h2>

<!-- BEGIN CHANGES HERE -->

<p>Begin this section by describing threat T1. This may include describing
examples of the threat being exploited by an adversary, a short discussion of
why this threat is problematic and needs to be addressed, and/or diagrams
showing how the threat might manifest in your group’s insecure
implementation.</p>

<p>Next, provide a short description of the mechanism that you chose to
implement to protect against this threat. For interactive protocols, it would be
helpful to provide a diagram explaining the messages exchanged between
participating principals (use html &lt;img&gt; tag to import such images). Be
sure to explain any cryptographic choices that your group makes: What types of
algorithms, modes of operation, and/or key lengths did you choose? Why? If
shared keys are needed, how are they exchanged?</p>

<p>Finally, provide a short argument addressing why your proposed mechanism
sufficiently addresses this particular threat. This argument should address the
correctness of your approach, as well as its overall security. For example, if
your mechanism involves a key agreement or key exchange protocol, you should
argue that both parties agree on the same key (correctnes) and that no other
party can figure out the key (security).</p>


<!-- END CHANGES HERE -->
    </section>
    <section id="threat4">
      <h2>Threat T4: Information Leakage via Passive Monitoring</h2>
<!-- BEGIN CHANGES HERE -->
<p>Passive monitoring on data that is not obfuscated presents a risk to the confidentiality of our communications.
	Confidentiality is important because if communications are not hidden,
	then tokens, files, passwords, and group server actions are all transparent to any listening entity.
	This violates the user's privacy and poses security risks to the integrity of the system.
	In particular, monitoring of tokens is especially problematic for reasons previously mentioned in T1.
</p>


<p>
	The mechanism we chose to implement to protect against this threat can be viewed in the diagram below T1.
	We chose to use a shared AES-256 key as we believed it to currently be the standard in secure data transmission.
	We exchanged shared AES keys via the server and client's public RSA keys. The client generates
	a shared AES key and shares it with the server after encrypting it with the group server's public key,
	as can be seen in T1.
</p>
<p>
	Our proposed mechanism sufficiently addresses the threat because at no point would an adversary be able to access a shared key.
	The shared keys are transmitted using RSA encryption at the authentication stage.
	Furthermore, passively monitoring adversaries would only see encrypted information being communicated between the server's and client.
	Because of this, all communications are hidden from outside observers.
	This ensures that file contents remain private, and that tokens cannot be stolen in transit.
</p>


<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->

<p>Conclude with a paragraph or two discussing the interplay between your
proposed mechanisms, and commenting on the design process that your group
followed. Did you discuss other ideas that didn’t pan out before settling on the
above-documented approach? Did you end up designing a really interesting
protocol suite that addresses multiple threats at once? Use this space to show
off your hard work!</p>

<p>If your group did any extra credit, please discuss that in this section, as
well.</p>

<!-- END CHANGES HERE -->
    </section>
  </body>
</html>
