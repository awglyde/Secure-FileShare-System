<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P4 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired */
header {
  text-align: center;
}

.img {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P4 Writeup</h1>
      <h2>
<!-- BEGIN CHANGES HERE -->

<ul style="list-style-type: none;">
	<li>George Hoesch - gah33@pitt.edu</li>
	<li>Alex Glyde - awg13@pitt.edu</li>
</ul>

<!-- END CHANGES HERE -->
      </h2>
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->
<!-- <p>In this section, broadly overview the types of cryptographic techniques that your group has decided to use to address threats T5â€“T7.</p> -->
<p>
    For <b>Threat T5</b>, we implemented sequence numbers and HMACs to prevent the threats of message reorder, replay, and modification.
</p>
<p>
    For <b>Threat T6</b>, we implemented an AES <b>keyring</b> provided by the Group Server along with the token that contains a mapping of group names to versioned Keys. When a user is removed or deleted from our system altogether the Group Server generates new AES keys for each group which are stored in the Group object and retrieved when a client needs them.
</p>
<p>
    When the user goes to upload or download a file to or from a particular group, they use the appropriate key for that file. The key version used to encrypt a file is stored on the ShareFile object held by the file server. This way, we can keep track of the key used to encrypt a particular file, which allows anyone else actively in the group to decrypt it. When a file is uploaded, the user simply encrypts it with the <i>latest</i> key.
</p>
<p>
    For <b>Threat T7</b>, we require that tokens are generated with the public key of the file server the user is intending to connect to. We require that our file servers validate that the public key in the user's token corresponds to its own public key. Thus, we prevent tokens from being used with any file server OTHER than the one originally intended.
</p>

<!-- END CHANGES HERE -->
<h3 style="text-align: center;"><b>Group Server Communication</b></h3>
<img class="img" src="../doc/t5_6_gs.png" style="width:1000px;">
<br />
<h3 style="text-align: center;"><b>File Server Communication</b></h3>
<img class="img" src="../doc/t5_6_fs.png" style="width:1000px;">
    </section>
    <section id="threat5">
      <h2>Threat T5: Message Reorder, Replay, or Modification</h2>
<!-- BEGIN CHANGES HERE -->

<h3>Describing the Threat</h3>
This threat can be broken down into multiple categories:
<ul>
    <li>
        <p>
            <b>In-Session Replay Attacks:</b>
            <br />
            These occur when an adversary attempts to replay messages that have been sent to or from the client or server within one particular session.
        </p>
        <p>
            Since we make no effort to verify the order in which messages came in, an old message from the same session would appear completely legitimate to both our client and server. Thus, our P3 implementation is vulnerable to In-Session replay attacks. We will show that adding sequence numbers mitigates this threat.
        </p>
    </li>
    <li>
        <p>
            <b>Out-of-Session Replay Attacks:</b>
            <br />
            These occur when an adversary attempts to replay messages from a previous session that have been sent to or from the client or server AFTER that particular session is over.
        </p>
        <p>
            Due to the fact that the server (file or group) generates the per-session AES keys we have already mitigated this threat in our P3 implementation. This is due to the fact that each session has a session key which is unique to it. If an adversary attempts to replay a message from an old session both the client and the server would reject it due to an invalid session key.
        </p>
    </li>
    <li>
        <p>
            <b>Reorder Attacks:</b>
            <br />
            These occur when an active man-in-the-middle attempts to re-order messages happening within a particular session with the intention of causing something harmful to happen or disrupting the normal flow of communication.
        </p>
        <p>
            Since our P3 implementation makes no effort to validate that a message came in the correct order, it is particularly vulnerable to re-order attacks. We will show that adding sequence numbers to our encrypted communication will prevent this threat.
        </p>
    </li>
    <li>
        <p>
            <b>Modification Attacks:</b>
            <br />
            These occur when an active man-in-the-middle attempts to modify messags happening within a particular session with the intention of causing disruption or preventing normal flow of communication and requests.
        </p>
        <p>
            The only message that is verified by a signature in our P3 implementation was the Token sent to the file server. Every other communication is vulnerable to modification attacks.
        </p>
        <p>
            An HMAC will allow each recipient to verify whether the message has been modified or not. We create HMACs and initialize them using the shared HMAC key for our particular session (see diagrams). Messages sent before the session key is exchanged (i.e., during authentication) are verified an HMAC that is created with the senders private RSA key since since we do not yet have a shared key.
        </p>
    </li>
</ul>
<h3>Mechanisms to protect against this Threat</h3>
<ul>
    <li>
        <p>
            <b>In-Session Replay Attacks:</b>
            <br />
            To protect against In-Session replay attacks we added sequence numbers to each subsequent message after the handshake is complete. Every message sent to and from the client and server have their sequence number verified by the respective recipient. If a message is out of order, we print a notification and disregard the message while continuing normal behavior. This lets the user know an adversary is potentially replaying old messages or doing someting else such as modifying them.
        </p>
    </li>
    <li>
        <p>
            <b>Out-of-Session Replay Attacks:</b>
            <br />
            As we mentioned in the above section, our P3 implementation largely already protected against out-of-session replay attacks. To further solidfy this protection the client is now also generating a per-session HMAC key which adds freshness from BOTH sides, making it even harder to achieve an out of session replay attack.
        </p>
    </li>
    <li>
        <p>
            <b>Reorder Attacks:</b>
            <br />
            Similar to in-session replay attacks, we protect against reordering attacks by adding a sequence number inside of each encrypted message. When the message is decrypted by either the client or the server, they verify the correct sequence number has been used and send the incremented sequence number in their next message.
        </p>
    </li>
    <li>
        <p>
            <b>Modification Attacks:</b>
            <br />
            Modification attacks are handled by adding an HMAC of the entire message we're sending BEFORE encrypting it. We add the HMAC of the entire message to the message, encrypt the whole message, then send it along. The recipient decrypts the message, removes the HMAC, recomputes the HMAC of the message with the shared HMAC key and thus verifies the integrity of the file.
        </p>
        <b>A special case:</b>
        <p>
            The lone exception to our providing HMACs generated with the HMAC key is the <i>first</i> message which is sent by the client. In the first message sent by the client (see diagram) they send their public key along with a nonce challenge, the HMAC key for future HMACs, and an HMAC of the entire message. This HMAC, however, is generated using the client's <b>private key</b>. We do this to ensure that an active man-in-the-middle can't <i>modify</i> this initial message and replace it with their own public key. If an adversary replaced the client's public key with their own, the server would attempt to verify the HMAC with this public key, and the verification would fail. The verification of this initial HMAC can ONLY succeed if it's verified with the authentic client's public key. Thus we have prevented a man in the middle from being a malicious router.
        </p>
    </li>
</ul>
<h3>Why This is Sufficient</h3>
<ul>
    <li>
        <p>
            <b>In-Session Replay Attacks:</b>
            <br />
            Sequence numbers adequately address in-session replay attacks because we reject messages with old sequence numbers on both the server and client side. If an adversary attempts to replay an old message from the same session, both the client and the server will attempt to verify that the sequence number is the one that's expected. When the logic fails to verify the sequence number, the old replayed message is rejected.
        </p>
    </li>
    <li>
        <p>
            <b>Out-of-Session Replay Attacks:</b>
            <br />
        </p>
    </li>
    <li>
        <p>
            <b>Reorder Attacks:</b>
            <br />
            Sequence numbers adequately address reorder attacks because we reject messages with sequence numbers that are out of order. If an adversary attempts to re-order the messages we sent, both our client and server will provide failure messages and reject the out of order message. The attacker will succeed in disrupting communication, but not in causing anything harmful other than annoyance. The client will have to send the request again if it was ignored due to re-ordering.
        </p>
    </li>
    <li>
        <p>
            <b>Modification Attacks:</b>
            <br />
            HMACs adequately address modification attacks because we check the integrity of each message which is sent between our client and server. If a message is modified, upon receiving it the recipient will attempt to validate the HMAC against the message contents. If the message has been modified, the HMAC verification will fail and the recipient will be notified. The message will then be rejected. This prevents modified messages from being accepted by the client or the server.
        </p>
    </li>
</ul>
<!-- END CHANGES HERE -->
    </section>
    <section id="threat6">
      <h2>Threat T6: File Leakage</h2>
<!-- BEGIN CHANGES HERE -->
<h3>Describing the Threat</h3>
<p>
    File leakage can be seen when a file server decides to become malicious and leak its files to adversaries. This is clearly a problem if the files are not encrypted because then adversaries have access to private files which they should not have access to.
</p>
<p>
    Our P3 implementation stores all files in plaintext on the file server and makes no attempt to obfuscate them. Thus our P3 implementation is particularly vulnerable to file leakage.
</p>
<h3>Description of Mechanism</h3>
<p>
    To solve the problem, we implemented a system of versioned <b>key rings</b> that are given to users when they request a token as a separate object. These keyrings are tied to a particular group and stored in the GroupList object. When a user requests a token, they are given a keyring which is a HashMap of Group Name strings to an ArrayList of keys. The index of the keys indicates the <b>version number</b> of the key. When a user is removed or deleted from a group on the group server, a new key is generated for all the groups that user was a member of. This ensures they don't have access to newly encrypted files. The version number of the key is stored in the ShareFile for each individual file on the file server. But the file server never has access to the actual keys. This is a <b>lazy revocation</b> technique, as opposed to <b>active re-encryption</b>.
</p>
<b>More indepth mechanism description:</b>
<p>
	In the GroupList object, the group server will store an arraylist of AES keys. The index in the ArrayList will indicate the 'version' of the key (i.e., ArrayList.get(0) will contain the "first" key in the list, and ArrayList.get(ArrayList.size()) will represent the "latest" or "last" key in the list).
</p>
<p>
	When a client requests a token, they will be given another object as well. This object will be a HashMap of String group names to an ArrayList of keys. The group server will only provide group names (and corresponding keys) that the user is a member of.
</p>
<p>
	When a client uploads a new file to the file server, they will encrypt it with the latest version of the AES key for that group, and add the version number to the ShareFile of the encrypted file which is stored in the FileList. When a client downloads a file, they will check the version number which is returned, and decrypt it using the appropriate key corresponding to that version number.
</p>
<p>
	To handle the version numbering, our EncryptionSuite class will have an encryptFile and decryptFile method. Both methods will take a file and an arrayList of keys as parameters. The encryptFile will use the latest key then append the index as the version number to the end of the file. The decryptFile method will remove the appended version number, then use the version number to index the appropriate key to decrypt the file.
</p>
<p>
	When a user is removed from a group or deleted, the group server will generate new keys for all relevant groups (e.g., if a user is deleted, the group server will generate a new key for each group they were a member of).
</p>
<h3>Why This is Sufficient</h3>
<p>
    This largely prevents file leakage because each file sent to the file server will be encrypted with an AES key that is never visible to the file server. It is only visible to the user uploading or downloading the file who has access to the group the file is owned by.
</p>
<p>
    Since the file server never sees the keys, and only receives encrypted files, the only way files can be leaked is if they are leaked to a malicious user who CURRENTLY has access to the group.
</p>
<p>
    If a user is removed from a group or deleted, but stores the keyring they have access to, they will only have access to files they already could have stolen when they became malicious.
</p>
<p>
    Say, for example, a user becomes malicious and downloads all the files they have access to. Presumably an administrator will swiftly remove them from the group or delete them altogether. Since they already would have had access to files encrypted with the old key, there is no reason for <b>active re-encryption</b>. Thus, we took a <b>lazy revocation</b> technique where, when a user is removed or deleted, a new key is generated for that group that the <i>old</i> user would <b>not</b> have access to.
</p>
<p>
    So, we have shown that files are only decryptable by users with access to that particular group. Users that are removed may be able to see leaked files that were encrypted with the original key, but any files that are accessed or newly uploaded will be inaccessible to the removed user.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat7">
      <h2>Threat T7: Token Theft</h2>
<!-- BEGIN CHANGES HERE -->

<h3>Describing the Threat</h3>
<p>
    Token theft can be seen if a File Server steals a token given to it by an authentic client and passes it off to another, most likely adversarial client who attempts to use it to connect to another file server.
</p>
<p>
    Alternatively, a malicious client may take a token they were granted and give it to another malicious client, or attempt to use it with a separate file server.
</p>
<p>
    The only thing our P3 implementation validates is that the token was signed by the group server. It could potentially be used for any file server the user wants to give it to, and it could potentially be stolen as well. Our P3 implementation is particularly vulnerable to token theft.
</p>
<h3>Description of Mechanism</h3>
<p>
    When a token is created, we add the public key of the file server that the client intends to connect to as an immutable field to our token. To get this key, the client passes it in to the group server when they connect.
</p>
<p>
    When the client passes the token to a file server, the file server will verify that the public key provided in the token is its own. Additionally, it verifies that the token was signed by the group server. This ensures that a token cannot be used to connect to a DIFFERENT file server than the one that was originally intended.
</p>
<p>
	When the client initially starts up the application, we request the file server's public key. The client validates whether or not this is the correct public key and then goes on to pass this to the group server which uses it to create a new object.
</p>
<h3>Why This is Sufficient</h3>
<p>
    Since an authentic file server would verify whether or not a token it receives is <i>intended</i> to be used with it, we can ensure that tokens cannot be stolen and used on other file servers.
</p>
<p>
    This guarantees that stolen tokens can only be used on the server at which the theft took place. If a user attempts to use a stolen token for another file server, it will be rejected.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->
<p>
    One interplay between the proposed mechanisms is that sequence numbers end up handling both message reorder and message replay attacks. They are a very simple and robust mechanism which allow us to prevent multiple threats without adding much extra bulk or computation to our messages.
</p>
<p>
    We believe our keyring solution is fairly elegant. Although we use lazy revocation I believe it handles the difficult task of file leakage in a very painless way without creating any unnecessary bandwidth bottlenecks.
</p>
<p>
    <b>Note on the special case HMAC during the handshake:</b>
	The first message to the server is verified by a different type of HMAC than we use for our typical AES encrypted communication because that is the message in which the client actually SENDS the fresh HMAC key to the server. If we use the HMAC key we send to the server to HMAC the first message, an adversary could potentially forge a message with a different HMAC key and public key other than the authentic client's. Instead, to prevent this, we initialize the first HMAC with the client's private key which cannot be forged. The server then verifies this HMAC with the attached public key. If the adversary modifies this public key, the HMAC verification will fail. Thus we prevent an active man in the middle attacker from sitting in the middle of a session authentication handshake.
</p>
<!-- <p>Conclude with a paragraph or two discussing the interplay between your
proposed mechanisms, and commenting on the design process that your group
followed. Did you discuss other ideas that didnâ€™t pan out before settling on the
above-documented approach? Did you end up designing a really interesting
protocol suite that addresses multiple threats at once? Use this space to show
off your hard work!</p>

<p>Finally, spend about one paragraph convincing me that your modified protocols
still address the threats T1â€“T4 described in Phase 3 of the project.</p>

<p>If your group did any extra credit, please discuss that in this section, as
well.</p> -->

<!-- END CHANGES HERE -->
    </section>
  </body>
</html>


<!-- <p>Begin this section by describing threat T5. This may include describing
examples of the threat being exploited by an adversary, a short discussion of
why this threat is problematic and needs to be addressed, and/or diagrams
showing how the threat might manifest in your groupâ€™s implementation from Phase
3.</p>

<p>Next, provide a short description of the mechanism that you chose to
implement to protect against this threat. For interactive protocols, it would be
helpful to provide a diagram explaining the messages exchanged between
participating principals (use html &lt;img&gt; tag to import such images). Be
sure to explain any cryptographic choices that your group makes: What types of
algorithms, modes of operation, and/or key lengths did you choose? Why? If
shared keys are needed, how are they exchanged?</p>

<p>Finally, provide a short argument addressing why your proposed mechanism
sufficiently addresses this particular threat. This argument should address the
correctness of your approach, as well as its overall security. For example, if
your mechanism involves a key agreement or key exchange protocol, you should
argue that both parties agree on the same key (correctnes) and that no other
party can figure out the key (security).</p>
 -->
