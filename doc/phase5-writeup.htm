<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<title>CS 1653 Project P5 Writeup</title>
	<style>
		/* BEGIN CHANGES HERE */
		/* In this section, you may add CSS styling if desired */

		header {
			text-align: center;
		}
		/* END CHANGES HERE */
	</style>

	<body>
		<header>
			<h1>CS 1653 Project P5 Writeup</h1>
			<h2>
<!-- BEGIN CHANGES HERE -->

George Hoesch - gah33@pitt.edu
<br />
Alex Glyde - awg13@pitt.edu

<!-- END CHANGES HERE -->
      </h2>
		</header>
		<section id="overview">
			<h2>Overview</h2>
			<!-- BEGIN CHANGES HERE -->

			<p>In this section, broadly overview your threat model, attacks, and countermeasures.
			</p>

			<!-- END CHANGES HERE -->
		</section>

		<section id="threatmodel">
			<h2>Threat Model</h2>
			<!-- BEGIN CHANGES HERE -->

			<ul>
				<li>
					<b>Group Server: </b> In this trust model the Group Server is mostly trustworthy. The one exception is that the Group Server may potentially leak the password file containing all user's passwords.
				</li>

				<li>
					<b>File Server: </b> In this trust model, File Servers are entirely untrustworthy. In particular, the file server may modify files, leak tokens, and leak files.
				</li>

				<li>
					<b>Clients: </b> We will assume that clients are not trustworthy. Specifically, clients may attempt to obtain tokens that belong to other users and/or modify the tokens issued to them by the group server to acquire additional permissions.
				</li>

				<li>
					<b>Other Principals: </b> We will assume that all communications in the system might be intercepted by a active attacker that can insert, reorder, replay, or modify messages.

				</li>
			</ul>

			<!-- END CHANGES HERE -->
		</section>
		<section id="attacks">
			<h2>Attacks</h2>
			<!-- BEGIN CHANGES HERE -->

			<p>
				<b>T8 Leaked Password File (Offline Brute Force Attack)</b> In this attack we assume that an attacker has acquired access to our list of passwords. Using the list of hashed, salted passwords the attacker can carry out an offline brute force attack and potentially acquire every user's password. Being able to brute force the passwords would allow an adversary to log in as any user in our system.
			</p>
			<p>
				<b>T9 Online Password Brute Force</b> In this attack an adversary may attempt to brute force a user's password (e.g., the attacker would attempt to log in to the Group Server posing as a user and attempt arbitrary combinations in an attempt to successfully log in). Being given unlimited attempts to log in would allow an attacker to try every permutation of characters until they can log in.
			</p>
			<p>
				<b>T10 File Modification</b> In this attack, a File Server may arbitrarily modify files that it is storing. For example: A user uploads a file. The file server then flips some bits in the file or replaces it with malware or attempts some other malicious modificaiton or replacement of the file.
			</p>

			<!-- END CHANGES HERE -->
		</section>
		<section id="countermeasure">
			<h2>Countermeasures</h2>
			<!-- BEGIN CHANGES HERE -->

			<p>Write a clear and concise description of the mechanism that your group proposes to address each attack from the previous section. Follow the format described in Phases P3 and P4 of the project: describe the mechanism in detail (including protocol diagrams
				as needed) and provide justification for why your proposed mechanism is sufficient for addressing the threat that you have discovered.
			</p>
			<p>
				<b>T8: </b> To protect against an adversary who has access to the list of our user's passwords, we implement a few separate mechanisms. The first mechanism we implement to protect against this threat is a <b>two-factor authentication</b> system. To login to the Group Server, a user would have to first enter their username. Stored in the UserList per user is an email associated with that user's account. When a user enters their username, an authentication email (encrypted with the user's public key) will be sent to them. The user will be required to open the authentication email and enter the authenticaiton code sent to them. After entering the authentication code they can proceed to enter their password. Thus, even if an adversary manages to brute force the user's password, they will still be unable to log in as that user unless they can also discover the user's private RSA key and the password to the user's email.
			</p>

			<p>
				<b>T9: </b>To prevent against an adversary brute forcing a user's password, we will limit the number of login attempts they have. A user will only have 3 attempts to correctly enter their pin code and password. If they fail all three times we will lock their account until their password is reset.
			</p>

			<p>
				<b>T10: </b>While we can't do anything to actively <b>prevent</b> a file server from modifying files that it has access to, we can ensure that the user is notified when a file has been modified. To make sure we can verify file integrity, we will use an HMAC that is created when the file is uploaded. So, for example, when a user goes to upload a file, they will create an HMAC of that file using the AES key which will be used for the file encryption, which is a key that is never visible to the file server. Thus, when the user downloads a file, they can verify the integrity of the file before actually saving the file to our drive. If the HMAC verification fails, the user will NOT save the file to their computer. This will prevent the file server from delivering malware or any other sort of malicious file. The HMAC of the file will be stored in the ShareFile object on the file server.
			</p>
			<p>
				<b>A note on our reasoning behind allowing the HMAC to be stored in plaintext in the ShareFile object on the file server: </b> This is okay because the HMAC is generated using an AES key from the Keyring associated with that group for encrypting and decrypting files (See P4 diagrams). This key is never visible to the file server, thus they cannot generate a legitimate HMAC because they don't have the relevant key (E.g., there is no way for them to recompute an accurate HMAC). 
			</p>

			<!-- END CHANGES HERE -->
		</section>
		<section id="discussion">
			<h2>Discussion</h2>
			<!-- BEGIN CHANGES HERE -->

			<p>Conclude with a paragraph or two discussing your threat model and countermeasure mechanisms. How realistic is your threat model for a real-life file sharing system? Comment on the design process that your group followed. Did you discuss other ideas
				that didn’t pan out before settling on the above-documented approach? Did you design attacks that you were unable to mitigate, or that you think are impossible to mitigate? Use this space to show off your hard work!</p>

			<p>Finally, spend a paragraph discussing the interplay between the countermeasures for your proposed attacks and your techniques for mitigating threats T1–T7 from Phases P3 and P4 of the project. Did you have to design your countermeasures in a particular
				way so as not to re-introduce these older threats?
			</p>

			<p>If your group implemented the countermeasures or did any extra credit, please discuss these additional contributions in this section, as well.</p>

			<!-- END CHANGES HERE -->
		</section>
	</body>

</html>
<!--

			<p>Define a threat model within which your implementation is subject to attack. You may re-use a threat model from another phase of the project, or you may define a new threat model (e.g., What if we were worried about more than just the file leakage
				from a file server? What if the group server was mostly trusted, but the password file or other state was somehow leaked? What about the possibility of DoS or DDoS attacks?). This threat model should be written up in the same format as the threat
				models that you were given for Phases P3 and P4 of the project.</p>

			<p>Write a clear and concise description of the attacks against your implementation. Describe each step of the attack, and include protocol diagrams to clarify your discussion as needed. Provide evidence for why these attacks are possible, and why they
				represent a threat against your system.</p>

			<p>If your group implemented programs to demonstrate your attacks, discuss these programs here.</p>

-->
