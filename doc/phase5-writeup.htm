<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<title>CS 1653 Project P5 Writeup</title>
	<style>
		/* BEGIN CHANGES HERE */
		/* In this section, you may add CSS styling if desired */

		header {
			text-align: center;
		}
		/* END CHANGES HERE */
	</style>

	<body>
		<header>
			<h1>CS 1653 Project P5 Writeup</h1>
			<h2>
<!-- BEGIN CHANGES HERE -->

George Hoesch - gah33@pitt.edu
<br />
Alex Glyde - awg13@pitt.edu

<!-- END CHANGES HERE -->
      </h2>
		</header>
		<section id="overview">
			<h2>Overview</h2>
			<!-- BEGIN CHANGES HERE -->

			<!-- <p>In this section, broadly overview your threat model, attacks, and countermeasures.
			</p>-->
			<p>
				<b>T8: </b>In Threat 8 we worry about the Group Server not being entirely trustworthy, compared to previous phases where the Group Server was entirely trustworthy. We now have to consider the possibility of having the passwords to our system leaked. We defend against this by a 2-factor authentication system along with having user's be required to reset their password after three failed logins.
			</p>
			<p>
				<b>T9: </b>In Threat 9 we worry about adversaries actively brute forcing passwords on the Group Server. To prevent this, similar to T8, our 2-factor authentication system along with our mechanism of locking a user's account after it has failed to login 3 times almost entirely prevents the possibility of an adversary brute forcing a user's password online.
			</p>
			<p>
				<b>T10: </b>In Threat 10 we worry about the possibility of a file server modifying files it has access to or potentially replacing them with malicious software (malware, ransomware, etc.). To mitigate this threat we HMAC every file we upload with an HMAC keyring similar to the way the file encryption keyring works, relying on the Group Server. This key is never visible to the File Server. Then, when a client attempts to download a file, we verify the HMAC in the ShareFile is correct. If verification fails, we do not unencrypt the file and notify the client that their file has been tampered with.
			</p>

			<!-- END CHANGES HERE -->
		</section>

		<section id="threatmodel">
			<h2>Threat Model</h2>

<!--

			<p>Define a threat model within which your implementation is subject to attack. You may re-use a threat model from another phase of the project, or you may define a new threat model (e.g., What if we were worried about more than just the file leakage
				from a file server? What if the group server was mostly trusted, but the password file or other state was somehow leaked? What about the possibility of DoS or DDoS attacks?). This threat model should be written up in the same format as the threat
				models that you were given for Phases P3 and P4 of the project.</p>

			<p>Write a clear and concise description of the attacks against your implementation. Describe each step of the attack, and include protocol diagrams to clarify your discussion as needed. Provide evidence for why these attacks are possible, and why they
				represent a threat against your system.</p>

			<p>If your group implemented programs to demonstrate your attacks, discuss these programs here.</p>

-->
			<!-- BEGIN CHANGES HERE -->

			<ul>
				<li>
					<b>Group Server: </b> In this trust model the Group Server is mostly trustworthy. The one exception is that the Group Server may potentially leak the password file containing all user's passwords.
				</li>

				<li>
					<b>File Server: </b> In this trust model, File Servers are entirely untrustworthy. In particular, the file server may modify files, leak tokens, and leak files.
				</li>

				<li>
					<b>Clients: </b> We will assume that clients are not trustworthy. Specifically, clients may attempt to obtain tokens that belong to other users and/or modify the tokens issued to them by the group server to acquire additional permissions.
				</li>

				<li>
					<b>Other Principals: </b> We will assume that all communications in the system might be intercepted by an active attacker that can insert, reorder, replay, or modify messages.

				</li>
			</ul>

			<!-- END CHANGES HERE -->
		</section>
		<section id="attacks">
			<h2>Attacks</h2>
			<!-- BEGIN CHANGES HERE -->

			<p>
				<b>T8 Leaked Password Files (Offline Brute Force Attack)</b> In this attack we assume that an attacker has acquired access to our list of passwords. Using the list of hashed, salted passwords the attacker can carry out an offline brute force attack and potentially acquire every user's password. Being able to brute force the passwords would allow an adversary to log in as any user in our system.
			</p>
			<p>
				<b>T9 Online Password Brute Force Attacks</b> In this attack an adversary may attempt to brute force a user's password (e.g., the attacker would attempt to log in to the Group Server posing as a user and attempt arbitrary combinations in an attempt to successfully log in). Being given unlimited attempts to log in would allow an attacker to try every permutation of characters until they can log in.
			</p>
			<p>
				<b>T10 File Modification</b> In this attack, a File Server may arbitrarily modify files that it is storing. For example: A user uploads a file. The file server then flips some bits in the file or replaces it with malware or attempts some other malicious modificaiton or replacement of the file.
			</p>

			<!-- END CHANGES HERE -->
		</section>
		<section id="countermeasure">
			<h2>Countermeasures</h2>
			<!-- BEGIN CHANGES HERE -->

			<!-- <p>Write a clear and concise description of the mechanism that your group proposes to address each attack from the previous section. Follow the format described in Phases P3 and P4 of the project: describe the mechanism in detail (including protocol diagrams
				as needed) and provide justification for why your proposed mechanism is sufficient for addressing the threat that you have discovered.
			</p> -->
			<p>
				<b>T8: (Proof of Concept)</b> To protect against an adversary who has access to the list of our user's passwords, we implement a few separate mechanisms. The first mechanism we implement to protect against this threat is a <b>two-factor authentication</b> system. To login to the Group Server, a user would have to first enter their username. Stored in the UserList per user is an email associated with that user's account. When a user enters their username, an authentication code (encrypted with the user's public key) will be emailed to them. The user is required to open the authentication email and enter the authenticaiton code sent to them. After entering the authentication code they can proceed to enter their password. Thus, even if an adversary manages to brute force the user's password, they will still be unable to log in as that user unless they can also discover the user's private RSA key and the password to the user's email.
			</p>
            <p>
            <b>Read the discussion below for an overview of the shortcomings of this proof of concept and our fixes in a full implementation.</b>
            </p>
			<p>
				Another countermeasure we implemented to make offline brute force attacks more difficult was our password requirements. We require each password have at least one special character, one upper case character, one lower case character, one digit, and for the total length to be at least 8 characters. This makes dictionary attacks much more difficult. Furthermore, we salt each password individually before we hash it. This forces an attacker to recompute a so called rainbow table before brute-forcing each password.
			</p>
			<p>
				<b>T9: </b>To prevent against an adversary brute forcing a user's password online, we will limit the number of login attempts they have. A user will only have 3 attempts to correctly enter their pin code and password. If they fail all three times we will lock their account until their password is reset. Furthermore, our implementation of 2-factor authentication will also help to prevent this threat. Not only will an adversary need access to the user's password, they'll also need access to the user's email, and to their private key.
			</p>
			<p>
            <b>T10: </b>While we can't do anything to actively <b>prevent</b> a file server from modifying files that it has access to, we can ensure that the user is notified when a file has been modified. To make sure we can verify file integrity, we will use an HMAC that is created when the file is uploaded. So, for example, when a user goes to upload a file, they will create an HMAC of the <b>encrypted</b> file with an HMAC key from the keyring (similar to our keyring for file leakage) rather than the one which will be used for the file encryption; this key is never visible to the file server. We decided to HMAC the <b>encrypted</b> file rather than the unencrypted one, so that the user never sees the actual file assuming it's been modified. This prevents the user from ever decrypting a malicious file. Thus, when the user downloads a file, there is no risk. If the HMAC verification fails, the user will NOT decrypt the file. This will prevent the file server from delivering malware or any other sort of malicious file. The HMAC of the file will be stored in the ShareFile object on the file server.
			</p>
			<p>
				<b>A note on our reasoning behind allowing the HMAC to be stored in plaintext in the ShareFile object on the file server: </b> This is okay because the HMAC is generated using an HMAC key from the Keyring associated with that group specifically for HMACs (similar to our file leakage keyring mechanism, see P4 diagrams). This key is never visible to the file server, thus they cannot generate a legitimate HMAC because they don't have the relevant key (E.g., there is no way for them to recompute an accurate HMAC).
			</p>

			<!-- END CHANGES HERE -->
		</section>
		<section id="discussion">
			<h2>Discussion</h2>
            <p>
            <b>Modifications to our T8 countermeasure in a full implementation:</b>
            In discussing our T8 countermeasure, we determined a flaw that would allow an attacker to bypass our proof of concept. The flaw occurs in a sophisticated attack where an adversary has retrieved a user's username, password, email, and is actively intercepting messages over the network (e.g., wireshark). 
            </p>
            <p>
            As mentioned above (in the Threat Model section), our T8 countermeasure assumes that the adversary has obtained a user's password.
            </p>
            <p>
            The reason the proof of concept is flawed is that it's possible in our implementation for an adversary to make it to the login stage (See P4 diagrams in folder P4). Once they've gotten to the login stage, if they're actively monitoring packets on the client or server's network, it's possible for the adversary to intercept the encrypted security code which is emailed to the client. This code is encrypted by the Group Server with the public key of whoever starts the session (authentic client or malicious adversary). If the adversary starts a session posing as the client, the authentication email will be sent to the correct client, but encrypted with a fake public key. The problem here is that we don't verify the public key of the client. This isn't as extreme as it sounds, because the client will get an email from the server that they can't decrypt. Assuming one is proactive in checking their email notifications and changes their password or locks their account, the threat could be minimal.
            </p>
            <p>
            <b>How to improve our T8 2-factor in a full implementation: </b>
            In a full implementation of our T8 countermeasure, when the user is created, the server and client (in a smartphone app) would share a secret value and a counter, which allow them to generate random one-time passwords independently of each-other. This would follow similarly to how Google Authenticator works. This prevents an adversary from being able to intercept and decrypt a client's authentication code, as in our proof of concept. The secret value is a random seed. The counter could start as any number of things, including the time of day. As time progressed, the counter would measure the difference between creation and current time. 
            </p>
            <p>
            <b>Why this solves the issue with our T8 Proof of Concept: </b>
            This solves our problem because it ensures that the authentication code cannot be revealed by a motivated adversary. Thus, even if the user's password is breached, the adversary is unable to correctly compute the authentication code because they don't have the secret value. Thus, we've reached a solution to T8. 
            </P>
			<!-- BEGIN CHANGES HERE -->

			<!-- <p>Conclude with a paragraph or two discussing your threat model and countermeasure mechanisms. How realistic is your threat model for a real-life file sharing system? Comment on the design process that your group followed. Did you discuss other ideas
				that didn’t pan out before settling on the above-documented approach? Did you design attacks that you were unable to mitigate, or that you think are impossible to mitigate? Use this space to show off your hard work!</p>

			<p>Finally, spend a paragraph discussing the interplay between the countermeasures for your proposed attacks and your techniques for mitigating threats T1–T7 from Phases P3 and P4 of the project. Did you have to design your countermeasures in a particular
				way so as not to re-introduce these older threats?
			</p>

			<p>If your group implemented the countermeasures or did any extra credit, please discuss these additional contributions in this section, as well.</p>
			-->

			<p>
				We think that the risk of adversaries attempting to brute-force, socially engineer, or otherwise obtain passwords maliciously is <b>very</b> prevalent to real filesharing systems (since most authenticate via password; i.e., Google Drive, Dropbox, Box, etc.). This is why we chose to focus on these sorts of threats so heavily in Phase 5.
			</p>
			<p>
				Furthermore, file modification can be a very significant risk considering how dangerous downloading files onto your computer can be. This is why we decided to focus on file modification for our final threat.
			</p>
			<p>
				We largely didn't have to modify our threat mitigation for threats T1-T7. They stayed almost entirely the same. Instead of modifying our mechanisms for T1-T7, we left them largely the same and simply built on top of them. For example, our 2-factor authentication builds on our solely password-based authentication by requiring the user to prove their identity through email and their private RSA key (by decrypting the authentication code) as well as their password.
			</p>
			<p>
				Similarly, the way we mitigated file modification largely built on our file encryption techniques, since we use the same key to encrypt the files as we do to HMAC them. We send the HMAC along with the file when we upload it. Since HMACs are cryptographically secure, and the file server does not have access to our Keyring, we don't have to worry about the possibility of them recomputing an HMAC for a modified or replaced file.
			</p>
			<p>
				Overall, we did not have to design our countermeasures in any special way to prevent re-introducing older threats. We simply had to build upon our existing framework to help further secure our system from the new threats we introduced.
			</p>
			<p>
				We were originally planning on doing DDoS prevention. However, when we implemented malicious clients that spammed requests to our group server, we found that it didn't actually affect the performance of our group server at all (Maybe our computer's hardware is too good and we needed to try more clients at one time?). Either way, the more we argued about it the more we found that the three threats we focused on were more of an issue than DDoS attacks.
			</p>

			<!-- END CHANGES HERE -->
		</section>
	</body>

</html>
