<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P3 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired.
 * Be sure your writeup still prints legibly. */
header {
  text-align: center;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P3 Writeup</h1>
<!-- BEGIN CHANGES HERE -->
<ul style="list-style-type: none;">
	<li>George Hoesch - gah33@pitt.edu</li>
	<li>Alex Glyde - awg13@pitt.edu</li>
</ul>
<!-- END CHANGES HERE -->
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->

<b>Some assumptions about our system:</b>
<p>
	We are developing this secure file sharing system for use within a University's research department.
	The users who will have access (via username / password) to the system are PhD professors,
	graduate students, accelling undergraduates, and members of the university's IT department to serve as administrators.
	Professors will (typically, but not exclusively) be the owners of groups, with graduate students and accelling undergraduates
	serving as users.
	To obtain a username and password, one must go through the Professors who will contact
	the IT department to get the user an account.
    When a user wants to run a file server,
    they post the public key and IP of the file server on their personal SSL/TLS secured HTTPS website
    within the department's page.
</p>
<p>
	To address the threats from T1-T4 we have implemented ubiquitous encryption for all communications
	across our system. Key exchange is done using public key cryptography and further communications
	are done using AES-256 on a per session basis. Login is done via a username and password. The password is then salted and hashed in a local file.
</p>
<p>
    For the passing of information to be secure we exchange a shared AES key
    between the client and the group/file server using RSA encryption. For the
    rest of the session (the period of time a user is connect to a server) all
    communication is encrypted using that AES Key.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat1">
      <h2>Threat T1: Unauthorized Token Issuance</h2>
<!-- BEGIN CHANGES HERE -->
<h3>Describing the Threat</h3>
<p>
	Unauthorized token issuance is equivalent to users being granted unauthorized access to our servers.
	This is problematic because unauthorized users being granted access to tokens that do not belong to them
	compromises our application's ability to discern identity. This results in a potential for adversaries
	to gain access to the compromised user's groups and files. In particular, if an administrator should be
	compromised, the results are particularly egregious due to the fact that administrators have a greater
	degree of privilege.
	In our insecure implementation we make no attempt to prevent unauthorized token issuance. Anyone with
	an account name can receive a token.
</p>

<img src="t1_t2.png" style="width:1000px;">
<br /><br />
<h3>Mechanism to protect against this Threat</h3>
<p>
    To initiate the authentication, the client requests the Group Server's public key. At the same time, it sends the group server its own public key. The group server stores this public key in a mapping from the hashcode of the public key to the key itself. This way, when the client encrypts the firt authentication message (which contains a challenge R along with the hash of its public key), the group server will know who to respond to.
</p>
<p>
	So, the client uses the group server's public key to encrypt a challenge R, along with the hash of their own public key K_c.
	The server generates a new shared AES per-session key K_AES and takes the Secure Hash (SHA-256) of the challenge R. When the new AES key is generated, the server creates a mapping between the Java hashCode() of the user's public key and the new AES session key. This ensures the user has a unique session and allows other users to have active AES session keys at the same time. This method allows us to manage each user's unique session key, and allows the user to have multiple sessions without interfering with other users.
	The group server then encrypts both the new shared key K_AES and H(R) and sends them back to the client.
    The user then verifies that the correct computation has been done on H(R).
</p>
<p>
	Next, the user sends back their username and password encrypted with the shared AES key.
	The server checks this password against its salted (11-byte salts), SHA-512 database of passwords (stored locally in the bin file along with the salt).
	The user is given three attempts to provide a correct password before their account is locked temporarily
	until they contact an administrator in person.
	This mechanism was chosen to prevent an adversary from attempting to brute-force a user's password.
	If the user's password is validated, the user and the group server have successfully authenticated and the user can carry out group server operations that it has the privilege to do, encrypting each operation it requests with the shared key K_AES.
</p>
<h3>Why This is Sufficient</h3>
<p>
    When and if the user requests a token, the server signs the user's token T using its private key (K_g)^-1
	then encrypts it with the shared AES key and sends it to the user.
	We chose AES-256 because of its suitability for transmitting data quickly and securely.
	Furthermore, it is used pervasively in industry.
	We chose the RSA public key crypto system because its suitable for symmetric shared session key-exchange.
</p>

<p>
	Our mechanism addresses the proposed threat because we only issue tokens to users who are
	authenticated via their password which is securely stored on the group server's database.
	The security of our token issuance is equivalent to the security of user's password.
	For this reason, we need to take care to ensure that passwords avoid being compromised,
	are updated frequently, and meet some basic complexity requirements.
</p>
<p>
	In our authentication system, an adversary could foreseeably reach the
	stage where the user is prompted for their password.
	This is why we added a limit on the number of times a user can enter their password incorrectly. Further, we only store an 11-byte salt and the salted SHA-256 hash of the password.
	This prevents brute force attacks and adds to the security of our mechanism.
</p>
<!-- END CHANGES HERE -->
    </section>
    <section id="threat2">
      <h2>Threat T2: Token Modification/Forgery</h2>

<!-- BEGIN CHANGES HERE -->
<h3>Describing the Threat</h3>
<p>
	The threat of token modification or forgery is seen when a user receives a token with a certain set of permissions,
	but modifies the token to receive more permissions than they were originally granted.
	This threat is problematic because if a server accepts a token that has been modified by a malicious client,
	the malicious client can then effectively grant themselves arbitrary permissions,
	such as access to the administrator group, owner of the administrator group, and unrestricted access to arbitrary groups and files.
	This compromises the confidentiality and potentially the integrity of our file sharing system.
	In our insecure implementation we make no attempt to verify the validity of a token, or check to see
	if it has been modified.
</p>

<h3>Mechanism to protect against this Threat</h3>
<p>
	The mechanism that we chose to implement to protect against this threat can be viewed in the diagram below T1.
	We require that the group server sign and encrypt each token granted to users using a shared AES key
	which is transmitted during the authentication period. This ensures that no passively listening adversaries can see the token,
	and furthermore, it prevents the user themselves from modifying the token. Any time an action on the file server is requested by the user,
	the file server will validate that the token is signed by the group server using the group server's public key which is loaded on the file server when it starts up from a local config file. (The owner of the file server will copy the public key of the group server into this local config file when they start their file server.)
</p>

<h3>Why This is Sufficient</h3>
<p>
	Our mechanism sufficiently addresses this particular threat because it prevents modification of tokens by users, and prevents passively listening adversaries from acquiring an unencrypted token. Further, we set an expiration date on the token and check to make sure it hasn't expired before any request on the file server is carried out.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat3">
      <h2>Threat T3: Unauthorized File Servers</h2>

<h3>Describing the Threat</h3>
<!-- BEGIN CHANGES HERE -->
<p>
	An example of unauthorized file servers manifesting themselves in our insecure implementation
	would be a user accidentally connecting to a file server they had thought was legitimate.
	This would pose a risk because the user could potentially upload sensitive files and information
	to a malicious server.
	In addition to this, the user will probably think that files hosted on this unauthorized server are legitimate.
	This might lead to the user downloading files containing malicious payloads, such as viruses, malware, etc.
</p>

<br /><br />
<img src="t3.png" style="width:1000px;">
<br /><br />
<h3>Mechanism to protect against this Threat</h3>
<p>
	To protect against a user connecting to an unauthorized file server, we first make the assumption that
	all authorized file servers, (since they are run by users of our system) will have their public keys
	posted on the owner of the file server's SSL/TLS secured HTTPS website within the Department.
    This will ensure that we know the IP address (and the user connecting can verify it manually),
	and can verify that the public key of the file server we are connecting to is legitimate.
</p>
<p>
    The client first sends the file server its public key K_c and requests the file server's public key. The file server responds with its public key. The client application prompts the client to verify whether or not this public key is authentic (Similar to SSH's method). Furthermore, the file server creates a mapping between the Java hashCode() of the client's public key and the public key itself. If the client accepts the public key, we continue; if not, communication ceases.
</p>
<p>
    Next, the client sends the desired file server an initial message containing a random 16 byte nonce R, and the hash of the client's public key K_c encrypted with the file server's public key K_f. Using our mapping from before, this will tell the server what public key to use to encrypt the response with.
</p>
<p>
	Next, the file server decrypts the user's message using its private key K_f^-1. The file server computes the SHA-256 hash of the 16-byte nonce R, and generates a new shared AES session key. It encrypts H(R) and K_AES using the client's public key and sends them back to the client.
</p>
<p>
    Furthermore, the file server (similar to the group server) creates a list of mappings between the Java HashCode() public keys and their session keys K_AES which will allow us to manage multiple users logging in at once. When a user makes a request to the server, they append the Java hashCode() of their public key. This way, the file server can determine which session key to use to decrypt a particular message if multiple users are logged in.
</p>
<p>
    Once the user has verified that the correct computation on R was performed, the user is now confident that the file server is <b>actually</b> the owner of K_f^-1. Since the message was encrypted using K_c, this ensures the client is the only one who can decrypt the shared key K_AES. At this point, we are authenticated and the user can carry out operations. When an operation is requested, the user sends the request along with the user's token which was provided by the group server. The file server then verifies this token's signature using the group server's public key which it loads from a configuration file on startup. All further communications are encrypted with the shared AES key.
</p>

<h3>Why This is Sufficient</h3>
<p>
	We know based on the assumptions of our system that the public keys of the file servers in our system are known and legitimate. We also require that the file server decrypt and respond to a challenge R correctly. This ensures the authentic file server is the only one who can respond to said challenge, and that the shared key was generated by this authentic file server. Thus, since initial communication and shared key exchange is done using encryption with these public keys, we can be certain that the shared key will only be known to the client and the respective file server. Further, we prompt the user to verify the public key that is displayed. We can be sure both parties agree on the same key as it is generated by the file server, encrypted with the client's public key (which is sent in the first message) and then sent to the client. This ensures both correctness and security.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat4">
      <h2>Threat T4: Information Leakage via Passive Monitoring</h2>
<h3>Describing the Threat</h3>
<!-- BEGIN CHANGES HERE -->
<p>Passive monitoring on data that is not obfuscated presents a risk to the confidentiality of our communications. Confidentiality is important because if communications are not hidden, then tokens, files, passwords, and group server actions are all transparent to any listening entity. This violates the user's privacy and poses security risks to the integrity of the system. In particular, monitoring of tokens is especially problematic for reasons previously mentioned in T1. In our insecure implementation we do not make any attempt to encrypt or obfuscate communications so all information would be leaked.
</p>
<h3>Mechanism to protect against this Threat</h3>
<p>
	The mechanism we chose to implement to protect against this threat can be viewed in the diagram below T1. We chose to use a shared AES-256 key as we believed it to currently be the standard in secure data transmission. We exchanged shared AES keys via the server and client's public RSA keys. In particular, the server generates a shared AES key and shares it with the client after encrypting it with the clients public key, as can be seen in T1.
</p>
<h3>Why This is Sufficient</h3>
<p>
	Our proposed mechanism sufficiently addresses the threat because at no point would an adversary be able to access a shared key. The shared keys are transmitted using RSA encryption at the authentication stage. Furthermore, passively monitoring adversaries would only see encrypted information being communicated between the server's and client. Because of this, all communications are hidden from outside observers. This ensures that file contents remain private, and that tokens cannot be stolen in transit.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->
<p>
    One thing we found interesting to implement was a mapping of the Java hashCode() of the client's public key and their per session shared AES key (which are generated by the server). This allows multiple users to log in at once without having the file or group server lose track of that particular user's AES key. This will allow an arbitrary number of users to connect at once.
</p>
<p>
    We also took many measures to work towards preventing active man in the middle attacks, and replay attacks. For instance, we require all server's to complete a challenge R by taking the SHA-256 hash of the challenge. These challenges are encrypted with the server's public key which ensures they are the only ones capable of decrypting it.
</p>
<p>
    We provide freshness for each session by generating the session key on the server side. This prevents many replay attacks as the messages replayed will be on an old session.
</p>
<p>
    We prevent clients from trying to log in to the group server with failed passwords multiple times. This helps protect against brute force attacks. If the user fails to enter the correct password 3 times they are locked out of the system until an admin unlocks their account and resets their password.
</p>
<p>
    We ensure the file server will always have the public key of the group server by copying over the group server's public key to any new file server that is created in a local config file. This ensures that the file server will be able to verify tokens signed by the group server without being vulnerable to an active man in the middle attacker.
</p>
<p>
    We put limitations on the passwords that are created for each user. They must be 8 characters long and require a special character among other requirements. This, along with the fact that we salt the password before hashing it helps prevent passwords from being compromised.
</p>
<p>
    We have an isExpired() method on our Token object which prevents users from using expired tokens to carry out operations on the file server.
</p>
<!-- END CHANGES HERE -->

    </section>
    <section id="concerns">
      <h2>Concerns / Issues</h2>

      <p>
          What happens if an attacker records arbitrary messages from the user AFTER authentication
          and replays them to the server, faking the users IP. Couldn't they effectively
          "replay" any command the user makes?
      </p>

      <p>
          What happens if a user becomes malicious and begins deleting files on the server?
          Even if an administrator revokes privileges the user remains logged in.
          How to solve this? Token expiration system?
      </p>
<!--
<p>Conclude with a paragraph or two discussing the interplay between your
proposed mechanisms, and commenting on the design process that your group
followed. Did you discuss other ideas that didn’t pan out before settling on the
above-documented approach? Did you end up designing a really interesting
protocol suite that addresses multiple threats at once? Use this space to show
off your hard work!</p>


<p>If your group did any extra credit, please discuss that in this section, as
well.</p>

    </section>
    <section id="requirements">
      <h2>Requirements</h2>
<p>Begin this section by describing threat T1. This may include describing
examples of the threat being exploited by an adversary, a short discussion of
why this threat is problematic and needs to be addressed, and/or diagrams
showing how the threat might manifest in your group’s insecure
implementation.</p>

<p>Next, provide a short description of the mechanism that you chose to
implement to protect against this threat. For interactive protocols, it would be
helpful to provide a diagram explaining the messages exchanged between
participating principals (use html &lt;img&gt; tag to import such images). Be
sure to explain any cryptographic choices that your group makes: What types of
algorithms, modes of operation, and/or key lengths did you choose? Why? If
shared keys are needed, how are they exchanged?</p>

<p>Finally, provide a short argument addressing why your proposed mechanism
sufficiently addresses this particular threat. This argument should address the
correctness of your approach, as well as its overall security. For example, if
your mechanism involves a key agreement or key exchange protocol, you should
argue that both parties agree on the same key (correctnes) and that no other
party can figure out the key (security).</p>

    </section>
  </body>
</html>

Avoid a centralized list of all file servers
Not reasonable to assume there's one single place you can go for every file server

So every user who runs a file server puts the key on their HTTPS website

Get away from centralized list of file servers

Don't necessarily need to give a token when user logs in to group server
Only need it for file server

More detail on the password situation. What's stored on the group server
If I create a user where did that user get a password

What salting scheme. How long are the salts (salt length), are they concatenated. How are they stored
Are they stored along the password

The size of R, how it's generated, where it's stored

Need details on the signed token. This is an object with some fields.
•	Trying to sign an object with a bunch of fields
•	Need to hash a list of groups, i.e. trying to sign an arbitrary length of groups. Hash the groups?
•	Make a toString method and then hash the toString

Make a field that contains the signed hash of the token
Verify the signed hash via the group server's public key

Rename "requests" with R in them as "challenges"

Specify where the file server gets the public key of the group server, why, how, where??????

-->
